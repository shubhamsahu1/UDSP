{"version":3,"file":"static/js/502.3ba2e134.chunk.js","mappings":"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","sources":["services/reportsService.js","pages/Reports.js"],"sourcesContent":["import api from './api';\n\nexport const reportsService = {\n  // Get report data by date range\n  getReportData: async (startDate, endDate) => {\n    try {\n      const response = await api.get('/reports/data', {\n        params: { startDate, endDate }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { success: false, message: 'Network error' };\n    }\n  },\n\n  // Export report data as CSV\n  exportCSV: async (startDate, endDate) => {\n    try {\n      const response = await api.get('/reports/export-csv', {\n        params: { startDate, endDate },\n        responseType: 'blob'\n      });\n      \n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `UDSP_Report_${startDate}_to_${endDate}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n      \n      return { success: true, message: 'CSV downloaded successfully' };\n    } catch (error) {\n      throw error.response?.data || { success: false, message: 'Network error' };\n    }\n  },\n\n  // Get summary statistics for date range\n  getSummary: async (startDate, endDate) => {\n    try {\n      const response = await api.get('/reports/summary', {\n        params: { startDate, endDate }\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { success: false, message: 'Network error' };\n    }\n  }\n};","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Alert,\n  CircularProgress,\n  Chip,\n  Card,\n  CardContent,\n  Divider,\n} from '@mui/material';\nimport {\n  Assessment as AssessmentIcon,\n  Download as DownloadIcon,\n  DateRange as DateRangeIcon,\n} from '@mui/icons-material';\nimport { useTranslation } from 'react-i18next';\nimport { useAuth } from '../contexts/AuthContext';\nimport { reportsService } from '../services/reportsService';\nimport { DataGrid } from '@mui/x-data-grid';\n\nconst Reports = () => {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  \n  // State management\n  const [startDate, setStartDate] = useState(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]);\n  const [endDate, setEndDate] = useState(new Date().toISOString().split('T')[0]);\n  const [reportData, setReportData] = useState(null);\n  const [labTests, setLabTests] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Check if user is admin\n  useEffect(() => {\n    if (user?.role !== 'admin') {\n      setError('Access denied. Admin role required.');\n      return;\n    }\n  }, [user]);\n\n  const fetchReportData = async () => {\n    if (!startDate || !endDate) {\n      setError('Please select both start and end dates');\n      return;\n    }\n\n    if (new Date(startDate) > new Date(endDate)) {\n      setError('Start date must be before end date');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError('');\n      \n      const [reportResponse, summaryResponse] = await Promise.all([\n        reportsService.getReportData(startDate, endDate),\n        reportsService.getSummary(startDate, endDate)\n      ]);\n\n      if (reportResponse.success) {\n        setReportData(reportResponse.data.reportData);\n        setLabTests(reportResponse.data.labTests);\n      } else {\n        setError(reportResponse.message || 'Failed to fetch report data');\n      }\n\n      if (summaryResponse.success) {\n        setSummary(summaryResponse.data);\n      }\n    } catch (err) {\n      setError('Failed to fetch report data');\n      console.error('Fetch report data error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExportCSV = async () => {\n    if (!startDate || !endDate) {\n      setError('Please select date range and generate report first');\n      return;\n    }\n\n    try {\n      const response = await reportsService.exportCSV(startDate, endDate);\n      if (response.success) {\n        setSuccess('CSV file downloaded successfully');\n      }\n    } catch (err) {\n      setError('Failed to export CSV');\n      console.error('Export CSV error:', err);\n    }\n  };\n\n  if (user?.role !== 'admin') {\n    return (\n      <Box>\n        <Alert severity=\"error\">\n          Access denied. Admin role required.\n        </Alert>\n      </Box>\n    );\n  }\n\n  // Prepare columns for DataGrid\n  const reportColumns = [\n    {\n      field: 'userName',\n      headerName: 'User Name',\n      width: 180,\n      renderCell: (params) => (\n        <strong style={{ fontWeight: 'medium' }}>{params.value}</strong>\n      ),\n    },\n    ...labTests.map((labTest) => ({\n      field: `labTest_${labTest.id}`,\n      headerName: labTest.name,\n      width: 180,\n      align: 'center',\n      headerAlign: 'center',\n      renderCell: (params) => {\n        const labData = params.value;\n        if (!labData) return null;\n        return (\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.2, width: '100%', alignItems: 'center',mt: .5 }}>\n            <Box sx={{ display: 'flex', gap: 1, justifyContent: 'center' }}>\n              <Chip\n                label={labData.sampleTaken}\n                size=\"small\"\n                color={labData.sampleTaken > 0 ? 'primary' : 'default'}\n              />\n              <Chip\n                label={labData.samplePositive}\n                size=\"small\"\n                color={labData.samplePositive > 0 ? 'warning' : 'default'}\n              />\n            </Box>\n            {labData.sampleTaken > 0 && (\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {((labData.samplePositive / labData.sampleTaken) * 100).toFixed(1)}%\n              </Typography>\n            )}\n          </Box>\n        );\n      },\n    })),\n  ];\n\n  // Prepare rows for DataGrid\n  const reportRows = (reportData || []).map((userRow, idx) => {\n    const row = {\n      id: userRow.userId || idx, // DataGrid requires a unique id\n      userName: userRow.userName,\n    };\n    labTests.forEach((labTest) => {\n      row[`labTest_${labTest.id}`] = userRow.labTests[labTest.id];\n    });\n    return row;\n  });\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n        <AssessmentIcon sx={{ mr: 2, color: 'primary.main' }} />\n        <Typography variant=\"h4\" component=\"h1\">\n          UDSP Reports\n        </Typography>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\n          {error}\n        </Alert>\n      )}\n\n      {success && (\n        <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccess('')}>\n          {success}\n        </Alert>\n      )}\n\n      {/* Date Range Selection */}\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <DateRangeIcon sx={{ mr: 1, color: 'primary.main' }} />\n          <Typography variant=\"h6\">Select Date Range</Typography>\n        </Box>\n        \n        <Grid container spacing={3} alignItems=\"center\">\n          <Grid item xs={12} sm={4}>\n            <TextField\n              fullWidth\n              label=\"Start Date\"\n              type=\"date\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n              InputLabelProps={{ shrink: true }}\n              required\n            />\n          </Grid>\n          \n          <Grid item xs={12} sm={4}>\n            <TextField\n              fullWidth\n              label=\"End Date\"\n              type=\"date\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n              InputLabelProps={{ shrink: true }}\n              required\n            />\n          </Grid>\n          \n          <Grid item xs={12} sm={4}>\n            <Button\n              variant=\"contained\"\n              onClick={fetchReportData}\n              disabled={loading}\n              size=\"large\"\n              fullWidth\n            >\n              {loading ? <CircularProgress size={24} /> : 'Generate Report'}\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Summary Statistics */}\n      {summary && (\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h4\" color=\"primary\">\n                  {summary.totalEntries}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Total Entries\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h4\" color=\"info.main\">\n                  {summary.uniqueUsers}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Active Users\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h4\" color=\"success.main\">\n                  {summary.totalSampleTaken.toLocaleString()}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Total Samples\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h4\" color=\"warning.main\">\n                  {summary.positivityRate}%\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Positivity Rate\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Report Table */}\n      {reportData && labTests.length > 0 && (\n        <Paper sx={{ mb: 3 }}>\n          <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Typography variant=\"h6\">\n              Report Data ({startDate} to {endDate})\n            </Typography>\n            <Button\n              variant=\"outlined\"\n              startIcon={<DownloadIcon />}\n              onClick={handleExportCSV}\n            >\n              Export CSV\n            </Button>\n          </Box>\n          <Divider />\n          <Box sx={{ height: 600, width: '100%' }}>\n            <DataGrid\n              autoHeight\n              rows={reportRows}\n              columns={reportColumns}\n              pageSize={10}\n              rowsPerPageOptions={[10, 25, 50]}\n              disableSelectionOnClick\n              sx={{ backgroundColor: 'background.paper' }}\n              getRowHeight={() => 'auto'}\n              localeText={{\n                noRowsLabel: 'No data found for the selected date range.'\n              }}\n            />\n          </Box>\n        </Paper>\n      )}\n\n      {/* Lab Test Statistics */}\n      {summary?.labTestStats && summary.labTestStats.length > 0 && (\n        <Paper sx={{ p: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Lab Test Statistics\n          </Typography>\n          <Grid container spacing={2}>\n            {summary.labTestStats.map((stat) => (\n              <Grid item xs={12} sm={6} md={4} key={stat.labTestId}>\n                <Card variant=\"outlined\">\n                  <CardContent>\n                    <Typography variant=\"subtitle1\" fontWeight=\"medium\" gutterBottom>\n                      {stat.labTestName}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Entries: {stat.entryCount}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Samples: {stat.totalSampleTaken.toLocaleString()}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Positive: {stat.totalSamplePositive.toLocaleString()}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"primary\" fontWeight=\"medium\">\n                      Rate: {stat.positivityRate}%\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Paper>\n      )}\n    </Box>\n  );\n};\n\nexport default Reports;"],"names":["reportsService","async","startDate","endDate","api","get","params","data","error","_error$response","response","success","message","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","concat","body","appendChild","click","remove","revokeObjectURL","_error$response2","_error$response3","Reports","t","useTranslation","user","useAuth","setStartDate","useState","Date","now","toISOString","split","setEndDate","reportData","setReportData","labTests","setLabTests","summary","setSummary","loading","setLoading","setError","setSuccess","useEffect","role","_jsx","Box","children","Alert","severity","reportColumns","field","headerName","width","renderCell","style","fontWeight","value","map","labTest","id","name","align","headerAlign","labData","_jsxs","sx","display","flexDirection","gap","alignItems","mt","justifyContent","Chip","label","sampleTaken","size","color","samplePositive","Typography","variant","toFixed","reportRows","userRow","idx","row","userId","userName","forEach","mb","AssessmentIcon","mr","component","onClose","Paper","p","DateRangeIcon","Grid","container","spacing","item","xs","sm","TextField","fullWidth","type","onChange","e","target","InputLabelProps","shrink","required","Button","onClick","reportResponse","summaryResponse","Promise","all","err","console","disabled","CircularProgress","md","Card","CardContent","totalEntries","uniqueUsers","totalSampleTaken","toLocaleString","positivityRate","length","startIcon","DownloadIcon","Divider","height","DataGrid","autoHeight","rows","columns","pageSize","rowsPerPageOptions","disableSelectionOnClick","backgroundColor","getRowHeight","localeText","noRowsLabel","labTestStats","gutterBottom","stat","labTestName","entryCount","totalSamplePositive","labTestId"],"sourceRoot":""}